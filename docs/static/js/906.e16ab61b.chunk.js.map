{"version":3,"file":"static/js/906.e16ab61b.chunk.js","mappings":"0JACA,GAAgB,QAAU,kCAAkC,MAAQ,iC,SCsBpE,EApByB,SAAH,GAAoC,IAA/BA,EAAQ,EAARA,SAAUC,EAAc,EAAdA,eAGjC,OACI,iBAAKC,UAAWC,EAAAA,QAAU,WACtB,gBAAID,UAAWC,EAAAA,MAAQ,cAAGH,EAASI,MAAK,QACxC,wBACKJ,EAASK,SAASC,KACnB,SAACC,EAASC,GAAK,OAAK,eAAIN,UAAWC,EAAAA,OAC/BM,QAAS,kBAAMR,EAAeO,EAAM,EAAC,UACpC,mBAAQN,UAAWC,EAAAA,QAAU,SAAEI,KAFcA,EAEQ,QAQ1E,ECpBA,EAA0B,4BAA1B,EAA6D,yBAA7D,EAAsG,kC,QCoBtG,EAjBmB,SAAH,GAAkD,IAA5CG,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAAQC,EAAW,EAAXA,YAAaC,EAAS,EAATA,UAE9C,OACI,iBAAKX,UAAWC,EAAU,WAE1B,gBAAKD,UAAWC,EAAiBW,IAAKJ,EAAOK,IAAI,aACjD,uBAAIJ,IACHE,GACI,SAAC,KAAO,CAACG,GAAG,UAAS,2GACrB,mBAAQd,UAAWC,EAAQM,QAAS,kBAAMG,GAAa,EAAC,oDAMrE,EClBA,EAAsB,yBAAtB,EAAyD,6BAAzD,EAA0G,uCCc1G,EAZoB,SAAH,GAAyB,IAAnBK,EAAI,EAAJA,KAAMC,EAAM,EAANA,OACzB,OACI,iCACA,gBAAKhB,UAAWC,EAAM,UACtB,gBAAKgB,MAAO,CAACC,MAAM,GAAD,OAAMH,EAAKC,EAAQ,IAAG,MAAMhB,UAAWC,OAEzD,iBAAKD,UAAWC,EAAoB,UAAEc,EAAI,iBAAMC,OAIxD,E,kBCZA,EAA0B,0BAA1B,EAA4G,gCCgF5G,EAxEiB,SAAH,GAAiF,IAA5EG,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAMC,EAAa,EAAbA,cAAcC,EAAU,EAAVA,WAAYvB,EAAc,EAAdA,eAAeW,EAAW,EAAXA,YAInEa,GAAiB,EACvBC,SAAStB,MAAK,UAAMkB,EAAM,EAAC,yCAC3B,IAAMtB,EAAWqB,EAAUC,GAE3B,OACI,gBAAKpB,UAAWC,EAAU,UAEtB,+BACI,SAACwB,EAAA,EAAe,UACU,IAAhBJ,GACF,SAACK,EAAA,EAAa,CACdC,GAAIJ,EACJK,QAAQ,EACRC,QAAS,IACTC,WAAW,OAAM,UAEb,iBAAK9B,UAAWC,EAAgB,WAC5B,SAAC,EAAgB,CAACH,SAAUA,EAAUC,eAAgBA,KAClD,8BAEQqB,IAAQD,EAAUH,SACd,SAAC,EAAW,CACZD,KAAMK,EAAM,EACZJ,OAAQG,EAAUH,iBAQtC,8BACMM,GACE,SAACI,EAAA,EAAa,CACdC,GAAIJ,EACJK,QAAQ,EACRC,QAAS,IACTC,WAAW,OAAM,UAEjB,SAAC,EAAU,CACXtB,MAAOV,EAASiC,aAChBtB,QAASX,EAASkC,eAClBtB,YAAaA,EACbC,UAAWS,IAAUD,EAAUH,OAAO,OAItC,SAACU,EAAA,EAAa,CACdC,GAAIJ,EACJK,QAAQ,EACRC,QAAS,IACTC,WAAW,OAAM,UAEjB,SAAC,EAAU,CACXtB,MAAOV,EAASmC,WAChBxB,QAASX,EAASoC,aAClBxB,YAAaA,EACbC,UAAWS,IAAUD,EAAUH,OAAO,aAS1E,C","sources":["webpack://testi/./src/components/QuestionVariants/QuestionVariants.module.scss?5d29","components/QuestionVariants/QuestionVariants.jsx","webpack://testi/./src/components/ResComment/ResComment.module.scss?5e6f","components/ResComment/ResComment.jsx","webpack://testi/./src/components/ProgressBar/ProgressBar.module.scss?9d2c","components/ProgressBar/ProgressBar.jsx","webpack://testi/./src/components/Question/Question.module.scss?33e6","components/Question/Question.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"variant\":\"QuestionVariants_variant__U+eLc\",\"title\":\"QuestionVariants_title__hItq2\"};","\r\nimport s from \"./QuestionVariants.module.scss\"\r\n\r\nconst QuestionVariants = ({question, onClickVariant}) => { \r\n    \r\n\r\n    return(\r\n        <div className={s.wrapper}>\r\n            <h2 className={s.title}> {question.title} </h2>\r\n            <ul>\r\n                {question.variants.map(\r\n                (variant, index) => <li className={s.answer} key={variant} \r\n                    onClick={() => onClickVariant(index)}\r\n                    ><button className={s.variant}>{variant}</button></li>\r\n                )}\r\n            </ul>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionVariants","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ResComment_wrapper__GzAMI\",\"next\":\"ResComment_next__vo1Pl\",\"questionImage\":\"ResComment_questionImage__GTeYc\"};","import React from \"react\";\r\nimport s from \"./ResComment.module.scss\"\r\nimport { NavLink} from 'react-router-dom'\r\n\r\nconst ResComment = ({ image, comment,onClickNext, finalCond}) => { \r\n    \r\n    return(\r\n        <div className={s.wrapper}>\r\n       \r\n        <img className={s.questionImage} src={image} alt=\"anwspic\" />\r\n        <p>{comment}</p>\r\n        {finalCond ?\r\n            (<NavLink to=\"/result\">Узнать результат!</NavLink>) :\r\n            (<button className={s.next} onClick={() => onClickNext()}>Дальше</button>)\r\n            }\r\n        \r\n       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResComment","// extracted by mini-css-extract-plugin\nexport default {\"bar\":\"ProgressBar_bar__68dzQ\",\"barDone\":\"ProgressBar_barDone__Ofm-Q\",\"progressIndicator\":\"ProgressBar_progressIndicator__iBWAt\"};","\r\nimport s from \"./ProgressBar.module.scss\"\r\n\r\nconst ProgressBar = ({ step, length}) => {\r\n    return(\r\n        <>\r\n        <div className={s.bar}>\r\n        <div style={{width: `${(step/length)*100}%`}} className={s.barDone}></div>\r\n        </div>\r\n        <div className={s.progressIndicator}>{step} из {length}</div>\r\n       \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProgressBar","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Question_wrapper__nlIL1\",\"backImage\":\"Question_backImage__0CAr7\",\"questionField\":\"Question_questionField__hFxKt\"};","import React from \"react\";\r\nimport QuestionVariants from \"../QuestionVariants/QuestionVariants\";\r\nimport ResComment from \"../ResComment/ResComment\";\r\n\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\n\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport s from \"./Question.module.scss\"\r\n\r\nconst Question = ({questions, state,questionState,correctRes, onClickVariant,onClickNext}) => {\r\n    \r\n    \r\n    \r\n    const appearQuestion = true;\r\n    document.title = `${state+1} вопрос`;\r\n    const question = questions[state];\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n           \r\n            <> \r\n                <TransitionGroup>\r\n                        { questionState===0 ? (\r\n                        <CSSTransition\r\n                        in={appearQuestion}\r\n                        appear={true}\r\n                        timeout={600}\r\n                        classNames=\"fade\"\r\n                        >\r\n                            <div className={s.questionField}>\r\n                                <QuestionVariants question={question} onClickVariant={onClickVariant}/>    \r\n                                    <>\r\n                                        {\r\n                                            state!==questions.length && \r\n                                                <ProgressBar \r\n                                                step={state+1}\r\n                                                length={questions.length}\r\n                                                />\r\n                                            \r\n                                        }\r\n                                    </>      \r\n                            </div>\r\n                            </CSSTransition>\r\n                        ) : (\r\n                            <>\r\n                                { correctRes ? (\r\n                                    <CSSTransition\r\n                                    in={appearQuestion}\r\n                                    appear={true}\r\n                                    timeout={600}\r\n                                    classNames=\"fade\"\r\n                                    >\r\n                                    <ResComment \r\n                                    image={question.imageCorrect} \r\n                                    comment={question.commentCorrect} \r\n                                    onClickNext={onClickNext}\r\n                                    finalCond={state === questions.length-1}/> \r\n                                </CSSTransition>\r\n                                ) : (\r\n                                \r\n                                    <CSSTransition\r\n                                    in={appearQuestion}\r\n                                    appear={true}\r\n                                    timeout={600}\r\n                                    classNames=\"fade\"\r\n                                    >\r\n                                    <ResComment \r\n                                    image={question.imageWrong} \r\n                                    comment={question.commentWrong} \r\n                                    onClickNext={onClickNext}\r\n                                    finalCond={state === questions.length-1}/> \r\n                                </CSSTransition>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                </TransitionGroup>\r\n            </> \r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default Question;"],"names":["question","onClickVariant","className","s","title","variants","map","variant","index","onClick","image","comment","onClickNext","finalCond","src","alt","to","step","length","style","width","questions","state","questionState","correctRes","appearQuestion","document","TransitionGroup","CSSTransition","in","appear","timeout","classNames","imageCorrect","commentCorrect","imageWrong","commentWrong"],"sourceRoot":""}